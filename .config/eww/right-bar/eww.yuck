;; ** Variables ***********************************************************************

;; Time vars
(defpoll TIME :interval "1m" `date +\"%H:%M\"`)
(defpoll DATE :interval "24h" `date +\"%a, %B %d\"`)

;; Battery vars
(defpoll BATSTATUS :interval "2m" `batstatus --no-icon`)
(defpoll BATICON :interval "2m" `scripts/battery --icon`)
(defpoll BATPERC :interval "2m" `scripts/battery --perc`)

;; Keyboard layout
(defpoll keyboard_layout :interval "3s" "xkblayout-state print %s")
(defvar KEYBOARD_ICON "images/keyboard.png")

;; Redshift
(defpoll redshift_status :interval "10s" "scripts/redshift_status")
(defvar REDSHIFT_ON_ICON "images/redeye.png")
(defvar REDSHIFT_OFF_ICON "images/blueeye.png")

;; CPU vars
(defpoll CPUICON :interval "2m" `scripts/cpu_temp --icon`)
(defpoll CPUTEMP :interval "2m" `scripts/cpu_temp`)

;; Mem vars
(defvar MEMICON "images/ram.png")
(defpoll MEMUSAGE :interval "1m" `scripts/mem_usage`)

;; Volume vars
(defpoll VOLICON :interval "1s" `scripts/volume --icon`)
(defpoll VOLUME :interval "1s" `scripts/volume --get`)

;; Network
(defpoll WIFIICON :initial "images/icons/system/no-wifi.png" :interval "1m" `scripts/check-network --icon`)
(defpoll NETSTAT :initial "Checking Wifi" :interval "1m" `scripts/check-network --stat`)

;; ** Widgets *************************************************************************

;; system
(defwidget system []
	(box :class "dockbox" :orientation "h" :spacing 6 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
		(systray :class "systray" :spacing 8)
		(button :onclick "scripts/widget_apps --pow"
			(box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
				(box :style "background-image: url('${BATICON}');" :class "trayicon baticon")
					(label :class "infotext" :halign "start" :valign "center" :text BATSTATUS)))
		(button :onclick "alacritty -e gotop -l kitchensink &"
			(box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
				(box :style "background-image: url('${CPUICON}');" :class "trayicon")
					(label :class "infotext" :halign "start" :text CPUTEMP)))
		(button :onclick "alacritty -e gotop -l kitchensink &"
			(box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
				(box :style "background-image: url('${MEMICON}');" :class "trayicon")
					(label :class "infotext" :halign "start" :text MEMUSAGE)))
		(button :onclick "scripts/volume --toggle"
			(box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
				(box :style "background-image: url('${VOLICON}');" :class "trayicon")
					(label :class "infotext" :halign "start" :text VOLUME)))
		(box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
			(box :style "background-image: url('${WIFIICON}');" :class "trayicon")
				(label :class "infotext" :halign "start" :text NETSTAT))
		(button :onclick ""
			(box :orientation "h" :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "true"
				(box :style "background-image: url('${KEYBOARD_ICON}');" :class "trayicon")
					(label :class "infotext" :halign "start" :valign "center" :text keyboard_layout)))
		(button :onclick "toggle_redshift"
			(box :orientation "h" :spacing 2 :valign "center" :space-evenly "false" :vexpand "false" :hexpand "true"
				(tooltip (label :text {redshift_status == 'on' ? "Redshift is on" : "Redshift is off"})
				(box :style "background-image: url('${redshift_status == 'on' ? REDSHIFT_ON_ICON : REDSHIFT_OFF_ICON}');" :class "trayicon"))))
		(box :class "clockbox" :orientation "v" :spacing 0 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "time" :halign "end" :wrap "false" :limit-width 25 :text TIME)
					(label :class "date" :halign "start" :wrap "false" :text DATE))))

;; ** Windows *************************************************************************

;; system
(defwindow system [screen]
           :monitor screen
           :geometry (geometry :x "-1%"
                               :y "10px"
                               :width "30%"
							   :height "40px"
                               :anchor "top right")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore true
(system))
